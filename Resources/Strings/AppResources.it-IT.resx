<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Wif" xml:space="preserve">
    <value>Formato di importazione del portafoglio (WIF)</value>
    <comment>Wallet Import Format</comment>
  </data>
  <data name="Mnemonic" xml:space="preserve">
    <value>Frase mnemonica</value>
    <comment>Mnemonic Phrase</comment>
  </data>
  <data name="BitcoinAddress" xml:space="preserve">
    <value>Indirizzo Bitcoin</value>
    <comment>Bitcoin Address</comment>
  </data>
  <data name="SignMessage" xml:space="preserve">
    <value>Firmare il messaggio</value>
    <comment>Sign Message</comment>
  </data>
  <data name="SignedMessage" xml:space="preserve">
    <value>Messaggio firmato</value>
    <comment>Signed Message</comment>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Messaggio</value>
    <comment>Message</comment>
  </data>
  <data name="MessageIsRequired" xml:space="preserve">
    <value>Il messaggio è richiesto</value>
    <comment>Message is required</comment>
  </data>
  <data name="BitcoinAddressIsRequired" xml:space="preserve">
    <value>L'indirizzo Bitcoin è richiesto</value>
    <comment>Bitcoin Address is required</comment>
  </data>
  <data name="MnemonicIsRequired" xml:space="preserve">
    <value>La mnemonica è richiesta</value>
    <comment>Mnemonic is required</comment>
  </data>
  <data name="WifIsRequired" xml:space="preserve">
    <value>WIF è richiesto</value>
    <comment>Wif is required</comment>
  </data>
  <data name="BitcoinAddressIsInvalid" xml:space="preserve">
    <value>L'indirizzo Bitcoin non è valido</value>
    <comment>Bitcoin Address is invalid</comment>
  </data>
  <data name="WifIsInvalid" xml:space="preserve">
    <value>WIF non è valido</value>
    <comment>Wif is invalid</comment>
  </data>
  <data name="MnemonicIsInvalid" xml:space="preserve">
    <value>La mnemonica non è valida</value>
    <comment>Mnemonic is invalid</comment>
  </data>
  <data name="MnemonicWordCount" xml:space="preserve">
    <value>Il conteggio delle parole mnemoniche deve essere 12, 15, 18, 21 o 24.</value>
    <comment>Mnemonic word count</comment>
  </data>
  <data name="SignedMessageCopied" xml:space="preserve">
    <value>Messaggio firmato copiato negli appunti</value>
    <comment>Signed Message Copied to Clipboad</comment>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
    <comment>OK</comment>
  </data>
  <data name="MnemonicExplanation" xml:space="preserve">
    <value>La firma dei messaggi mnemonici utilizza la frase mnemonica, un elenco di parole separate da spazi, per derivare la chiave di firma. L'indirizzo Bitcoin viene validato per confermare la sua associazione con la chiave di firma e il messaggio viene quindi firmato in conformità con lo standard BIP-322.</value>
    <comment>Mnemonic Explanation</comment>
  </data>
  <data name="WifExplanation" xml:space="preserve">
    <value>La firma del messaggio WIF utilizza il WIF per derivare la chiave di firma. L'indirizzo Bitcoin viene convalidato per confermare la sua associazione con la chiave di firma e il messaggio viene quindi firmato in conformità con lo standard BIP-322.</value>
    <comment>Mnemonic Explanation</comment>
  </data>
  <data name="LedgerExplanation" xml:space="preserve">
    <value>La firma dei messaggi di Ledger utilizza il portafoglio hardware Ledger per firmare il messaggio in conformità con lo standard BIP-322.</value>
    <comment>Ledger Explanation</comment>
  </data>
  <data name="VerifyMessage" xml:space="preserve">
    <value>Verificare il messaggio</value>
    <comment>Verify Message</comment>
  </data>
  <data name="ProofOfOwnership" xml:space="preserve">
    <value>Prova di proprietà</value>
    <comment>Proof of Ownership</comment>
  </data>
  <data name="ValidationFailed" xml:space="preserve">
    <value> La convalida del messaggio non è riuscita</value>
    <comment>Message Validation Failed</comment>
  </data>
</root>